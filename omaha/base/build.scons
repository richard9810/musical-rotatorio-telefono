# Copyright 2009 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

Import('env')

import glob
import os
import os.path

env.BuildSConscript('logging')
env.BuildSConscript('security')

local_env = env.Clone()

inputs = [
    'apply_tag.cc',
    'accounts.cc',
    'app_util.cc',
    'atl_regexp.cc',
    'browser_utils.cc',
    'cgi.cc',
    'clipboard.cc',
    'command_line_parser.cc',
    'command_line_validator.cc',
    'commands.cc',
    'crash_if_specific_error.cc',
    'crc.cc',
    'debug.cc',
    'disk.cc',
    'dynamic_link_kernel32.cc',
    'encrypt.cc',
    'environment_block_modifier.cc',
    'environment_utils.cc',
    'error.cc',
    'event_trace_controller.cc',
    'event_trace_provider.cc',
    'etw_log_writer.cc',
    'extractor.cc',
    'file.cc',
    'file_reader.cc',
    'file_store.cc',
    'file_ver.cc',
    'firewall_product_detection.cc',
    'highres_timer-win32.cc',
    'localization.cc',
    'logging.cc',
    'md5.cc',
    'omaha_version.cc',
    'path.cc',
    'pe_utils.cc',
    'popup_menu.cc',
    'process.cc',
    'proc_utils.cc',
    'program_instance.cc',
    'queue_timer.cc',
    'reactor.cc',
    'reg_key.cc',
    'regexp.cc',
    'registry_hive.cc',
    'registry_monitor_manager.cc',
    'registry_store.cc',
    'safe_format.cc',
    'serializable_object.cc',
    'service_utils.cc',
    'shell.cc',
    'shutdown_handler.cc',
    'signatures.cc',
    'signaturevalidator.cc',
    'single_instance.cc',
    'sta.cc',
    'string.cc',
    'synchronized.cc',
    'system.cc',
    'system_info.cc',
    'thread.cc',
    'thread_pool.cc',
    'time.cc',
    'timer.cc',
    'user_info.cc',
    'user_rights.cc',
    'utils.cc',
    'vista_utils.cc',
    'vistautil.cc',
    'window_utils.cc',
    'wmi_query.cc',
    'xml_utils.cc',

    '../third_party/chrome/files/src/base/cpu.cc',
    '../third_party/chrome/files/src/base/rand_util.cc',
    '../third_party/chrome/files/src/crypto/rsa_private_key.cc',
    '../third_party/chrome/files/src/crypto/rsa_private_key_win.cc',
    '../third_party/chrome/files/src/crypto/signature_creator_win.cc',
    '../third_party/smartany/shared_any.cc',
    ]

# Required by the exception barrier code.
local_env.Append(ASFLAGS = ['/safeseh'])

# Build these into a library.
local_env.ComponentStaticLibraryMultiarch('base', inputs)

""" Build the CRX Verifier libraries."""

Import('env')
local_env = env.Clone()

crx_file_path = '/third_party/chrome/files/src/components/crx_file/'
local_env.Append(PROTO_PATH = '$MAIN_DIR' + crx_file_path)
local_env.Append(CPP_OUT = '$TARGET_ROOT/proto_files' + crx_file_path)
proto_sources = [
    '$MAIN_DIR' + crx_file_path + 'crx3.proto'
]
cc_files = local_env.CompileProtoBuf(proto_sources)

default_protobuf_src_dir = '$GOOGLE3/third_party/protobuf/src'
protobuf_src_dir = os.getenv('OMAHA_PROTOBUF_SRC_DIR', default_protobuf_src_dir)

local_env.Append(
    CCFLAGS=[
        '/wd4100',
        '/wd4125',
        '/wd4127',
        '/wd4146',
        '/wd4244',
        '/wd4309',
        '/wd4577',
        '/wd4800',
        '/wd4995',
        '/wd4996',
    ],
    CPPPATH=[
        '$GOOGLE3',
        protobuf_src_dir,
        '$TARGET_ROOT/proto_files/',
    ],
)

cc_files += [
    '../third_party/chrome/files/src/components/crx_file/crx_verifier.cc',
    '../third_party/chrome/files/src/components/crx_file/id_util.cc',
    '../third_party/chrome/files/src/crypto/signature_verifier.cc',
    '../third_party/chrome/files/src/crypto/secure_util.cc',
]

""" Add protobuf library files."""

protobuf_src_path = os.path.join(protobuf_src_dir, 'google/protobuf/')
local_env.FilterOut(CCFLAGS=['/W4'])
local_env.Append(
    CPPDEFINES=['LIBPROTOBUF_EXPORTS'],
    CCFLAGS=[
        '/wd4005',
        '/wd4018',
        '/wd4065',
        '/wd4146',
        '/wd4244',
        '/wd4251',
        '/wd4267',
        '/wd4305',
        '/wd4309',
        '/wd4355',
        '/wd4506',
        '/wd4530',
        '/wd4541',
        '/wd4577',
        '/wd4800',
        '/wd4996',
    ],
    CPPPATH=[
        '$GOOGLE3',
        protobuf_src_dir,
        protobuf_src_path,
    ],
)

protobuf_src_path_dir = local_env.Dir(protobuf_src_path)
local_env.Dir('protobuf').addRepository(protobuf_src_path_dir)
cc_files += [
    'protobuf/compiler/importer.cc',
    'protobuf/compiler/parser.cc',
    'protobuf/descriptor.cc',
    'protobuf/descriptor.pb.cc',
    'protobuf/descriptor_database.cc',
    'protobuf/dynamic_message.cc',
    'protobuf/extension_set.cc',
    'protobuf/extension_set_heavy.cc',
    'protobuf/generated_message_reflection.cc',
    'protobuf/generated_message_util.cc',
    'protobuf/implicit_weak_message.cc',
    'protobuf/io/coded_stream.cc',
    'protobuf/io/printer.cc',
    'protobuf/io/tokenizer.cc',
    'protobuf/io/strtod.cc',
    'protobuf/io/zero_copy_stream.cc',
    'protobuf/io/zero_copy_stream_impl.cc',
    'protobuf/io/zero_copy_stream_impl_lite.cc',
    'protobuf/arena.cc',
    'protobuf/message.cc',
    'protobuf/message_lite.cc',
    'protobuf/reflection_ops.cc',
    'protobuf/repeated_field.cc',
    'protobuf/service.cc',
    'protobuf/stubs/common.cc',
    'protobuf/stubs/int128.cc',
    'protobuf/stubs/status.cc',
    'protobuf/stubs/stringprintf.cc',
    'protobuf/stubs/stringpiece.cc',
    'protobuf/stubs/structurally_valid.cc',
    'protobuf/stubs/strutil.cc',
    'protobuf/stubs/substitute.cc',
    'protobuf/text_format.cc',
    'protobuf/unknown_field_set.cc',
    'protobuf/wire_format.cc',
    'protobuf/wire_format_lite.cc',
]

""" Add zlib library files."""

local_env.FilterOut(CCFLAGS=['/WX'])
zlib_src_path = '$THIRD_PARTY/zlib/v1_2_11/'
zlib_src_path_dir = local_env.Dir(zlib_src_path)
local_env.Dir('zlib').addRepository(zlib_src_path_dir)
cc_files += ['zlib/' +
             os.path.basename(x) for x in
             glob.glob(zlib_src_path_dir.path + os.sep + '*.c')]

""" Add libzip library files."""

libzip_src_path = '$THIRD_PARTY/libzip/lib/'
libzip_src_path_dir = local_env.Dir(libzip_src_path)
local_env.Dir('libzip').addRepository(libzip_src_path_dir)
libzip_gladman_src_path = '$THIRD_PARTY/libzip/lib/gladman-fcrypt'

local_env.Append(
    CPPDEFINES=[
        'HAVE_CONFIG_H',
    ],
    CPPPATH=[
        'libzip/',
        libzip_gladman_src_path,
        libzip_src_path,
        zlib_src_path,
    ],
    CCFLAGS=[
        '/wd4005',
        '/wd4244',
    ],
)

cc_files += ['libzip/' + os.path.basename(x) for x in list(
    set(glob.glob(libzip_src_path_dir.path + os.sep + '*.c')) -
    set(glob.glob(libzip_src_path_dir.path + os.sep + '*unix*.c')) -
    set(glob.glob(libzip_src_path_dir.path + os.sep + 'zip_crypto_[cgo]*.c')) -
    set(glob.glob(libzip_src_path_dir.path + os.sep + 'zip_source_file.c')) -
    set(glob.glob(libzip_src_path_dir.path + os.sep + 'zip_random_uwp.c')) -
    set(glob.glob(libzip_src_path_dir.path + os.sep + 'zip_winzip_aes.c')) -
    set(glob.glob(libzip_src_path_dir.path + os.sep + '*bzip2.c')))]

local_env.ComponentStaticLibraryMultiarch(
    'crx_file', cc_files, COMPONENT_STATIC=True, use_pch_default=False)
